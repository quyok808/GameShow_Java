package Home;

import FirstRound.frmVong1;
import javax.swing.*;
import java.io.*;
import static java.lang.Thread.sleep;
import java.net.Socket;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 * 2180609157
 * NGUYEN THI HONG VI
 */
public class frmphongcho extends javax.swing.JFrame {
private static final int PORT = 12345;
    private static final String HOST = "25.33.107.197";
    private boolean isPair = true;
    private PrintWriter out;
    private BufferedReader in;
    private Socket socket;
    private final String playerName;
    private Timer timer;
    private int elapsedTime = 0; // Biến đếm thời gian

    /**
     * Creates new form frmphongcho
     *
     * @param playerName
     */
    public frmphongcho(String playerName) {
        this.playerName = playerName;
        initComponents();
        connectToServer();
        initializeActions();
    }

    private void connectToServer() {
        try {
            socket = new Socket(HOST, PORT);
            out = new PrintWriter(socket.getOutputStream(), true);
            in = new BufferedReader(new InputStreamReader(socket.getInputStream()));

            if (playerName == null || playerName.trim().isEmpty()) {
                JOptionPane.showMessageDialog(this, "Tên người chơi không hợp lệ. Thoát trò chơi.");
                System.exit(0);
            }
            out.println("PLAYER_NAME " + playerName);

            // Tạo luồng đọc từ server
            new Thread(this::readMessagesFromServer).start();
        } catch (IOException e) {
            JOptionPane.showMessageDialog(this, "Không thể kết nói đến server. Hãy liên hệ Admin để xử lý !!! ", "Error", JOptionPane.ERROR_MESSAGE);
            System.exit(0);
        }
    }

    private void readMessagesFromServer() {
        try {
            String message;
            while ((message = in.readLine()) != null) {
                processServerMessage(message);
            }
        } catch (IOException e) {
            JOptionPane.showMessageDialog(this, "Connection lost: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void processServerMessage(String message) {
        SwingUtilities.invokeLater(() -> {
            if (message.startsWith("Waiting for players:")) {
                txt_Status.setText(message + "\n");
            } else if (message.startsWith("Game starts in")) {
                txt_timer.setText(message); // Hiển thị thông báo từ server
                if (timer != null && timer.isRunning()) {
                    timer.stop(); // Dừng đếm thời gian
                }
                btn_Cancel.setEnabled(false);
            } else {
                txt_Status.append(message + "\n");
            }
            if (message.startsWith("Game started! Good luck!")) {
                // Sau khi nhận thông báo "Game starting!", chuyển sang frmClient
                JOptionPane.showMessageDialog(null, "GAME START. Good luck !!!");
                try {
                    sleep(1000);
                } catch (InterruptedException ex) {
                    Logger.getLogger(frmphongcho.class.getName()).log(Level.SEVERE, null, ex);
                }
                switchToClient();
            }
        });
    }

    private void switchToClient() {
        frmVong1 obj = new frmVong1(playerName);
        obj.setVisible(true);
        this.dispose();
    }

    private void sendToServer(String message) {
        if (out != null) {
            out.println(message);
            btnPair.setEnabled(isPair);
        }
    }

    private void initializeActions() {
        btnPair.addActionListener(e -> {
            isPair = false;
            sendToServer("Pair");
            startCountingUntilGameStarts(); // Bắt đầu đếm thời gian
        });
        btn_Cancel.addActionListener(e -> {
            isPair = true;
            sendToServer("Unpair");
            ReturnToHomePage();
        });
    }

    private void startCountingUntilGameStarts() {
        // Đảm bảo không khởi động lại Timer nếu đã chạy
        if (timer != null && timer.isRunning()) {
            return;
        }

        elapsedTime = 0; // Đặt lại thời gian
        timer = new Timer(1000, e -> {
            elapsedTime++;
            txt_timer.setText("Đang đợi người chơi khác tham gia: " + elapsedTime + " s");
        });

        timer.start(); // Bắt đầu đếm thời gian
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        txt_Status = new javax.swing.JTextArea();
        btnPair = new javax.swing.JButton();
        txt_timer = new javax.swing.JLabel();
        btn_Cancel = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("DejaVu Serif Condensed", 1, 24)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Phòng chờ");

        txt_Status.setEditable(false);
        txt_Status.setColumns(20);
        txt_Status.setFont(new java.awt.Font("DejaVu Serif", 0, 13)); // NOI18N
        txt_Status.setRows(5);
        jScrollPane1.setViewportView(txt_Status);

        btnPair.setFont(new java.awt.Font("DejaVu Serif", 3, 18)); // NOI18N
        btnPair.setText("Ghép");

        txt_timer.setFont(new java.awt.Font("DejaVu Serif", 3, 12)); // NOI18N
        txt_timer.setAlignmentX(0.5F);

        btn_Cancel.setFont(new java.awt.Font("DejaVu Serif", 3, 18)); // NOI18N
        btn_Cancel.setText("Huỷ");
        btn_Cancel.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnPair, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btn_Cancel, javax.swing.GroupLayout.DEFAULT_SIZE, 153, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(txt_timer, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txt_timer, javax.swing.GroupLayout.DEFAULT_SIZE, 26, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnPair, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btn_Cancel, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(frmphongcho.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(frmphongcho.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(frmphongcho.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(frmphongcho.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new frmphongcho("Default Player").setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnPair;
    private javax.swing.JButton btn_Cancel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea txt_Status;
    private javax.swing.JLabel txt_timer;
    // End of variables declaration//GEN-END:variables

    private void ReturnToHomePage() {
        frmtrangchu obj = new frmtrangchu(playerName);
        obj.setVisible(true);
        this.dispose();
    }
}
